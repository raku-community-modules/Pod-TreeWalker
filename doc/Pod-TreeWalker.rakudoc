=begin pod

=head1 NAME

Pod::TreeWalker - Walk a Pod tree and generate an event for each node

=head1 SYNOPSIS

=begin code :lang<raku>

use Pod::TreeWalker;

my $L = My::Listener.new;
my $o = Pod::TreeWalker.new: :listener($L);
my @events = $o.walk-pod($=pod);

=end code

=head1 DESCRIPTION

This class provides an API for walking a pod tree (as provided by
C<$=pod>). Each node in the tree will trigger one or more events. These events
cause methods to be called on a listener object that you provide. This lets
you do something with a Pod document without having to know much about the
underlying tree structure of Pod.

Note: Use distribution C<Pod::Load> for an easy way to access the Pod
from a file or a string.

=head1 METHODS

=head2 new

=begin code :lang<raku>

my $walker = Pod::TreeWalker.new: :listener($object);

=end code

The constructor requires a single named argument C<:listener>. This object must
implement the C<Pod::TreeWalker::Listener> API
as demonstrated in file './t/lib/TestListener.rakumod'.
See more details in B<Listener.md>.

=head2 walk-pod

=begin code :lang<raku>

my @events = $walker.walk-pod($pod);

=end code

This method walks through a pod tree starting with the top node in
C<$pod>. You can provide either an array of pod nodes (as stored in C<$=pod>)
or a single top-level node (such as C<$=pod[0]>).
The C<@events> list provides the details of each pod node encountered.

=head2 text-content-of

=begin code :lang<raku>

say $walker.text-contents-of($pod)

=end code

Given a C<Pod::Block> of any sort, this method recursively descends the
blocks contents and returns the concatenation of all the plain text that
it finds.

=head1 AUTHOR

Dave Rolsky

=head1 COPYRIGHT AND LICENSE

Copyright 2015 - 2018 Dave Rolsky

Copyright 2019 - 2025 Raku Community

This library is free software; you can redistribute it and/or modify it under the Artistic License 2.0.

=end pod

# vim: expandtab shiftwidth=4
